/**
 * @fileoverview Firestore Security Rules for Solaris智控 application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has a dedicated data tree
 * under `/users/{userId}`, and only the authenticated user with a matching `uid` can
 * read and write to their own data.
 *
 * Data Structure:
 * All data is nested under `/users/{userId}`, including user profiles, energy data,
 * predictions, and switch states. This structure ensures clear ownership and simplifies
 * security rules by avoiding the need for complex queries or cross-collection lookups.
 *
 * Key Security Decisions:
 * - User data is private by default: Only the authenticated user can access their own
 *   data. No listing of users is allowed.
 * - Data consistency is enforced by validating the `userId` in the path against the
 *   authenticated user's `uid` on create operations and ensuring immutability on updates.
 * - No roles or shared access are implemented in this initial version.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the /users/{userId} collection, ensuring only the owner can read and write their profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching userId can create their profile.
     * @allow (get, list, update, delete) - Authenticated user with matching userId can read, update and delete their profile.
     * @deny (create) - Unauthenticated user cannot create a profile.
     * @deny (get, list, update, delete) - Authenticated user trying to access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Protects the /users/{userId}/energyData/{energyDataId} collection, ensuring only the owner can manage their energy data.
     * @path /users/{userId}/energyData/{energyDataId}
     * @allow (create) - Authenticated user with matching userId can create energy data entries.
     * @allow (get, list, update, delete) - Authenticated user with matching userId can read, update, delete and list their energy data entries.
     * @deny (create) - Unauthenticated user cannot create energy data entries.
     * @deny (get, list, update, delete) - Authenticated user trying to access another user's energy data.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/energyData/{energyDataId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Protects the /users/{userId}/predictions/{predictionId} collection, ensuring only the owner can manage their energy predictions.
     * @path /users/{userId}/predictions/{predictionId}
     * @allow (create) - Authenticated user with matching userId can create prediction entries.
     * @allow (get, list, update, delete) - Authenticated user with matching userId can read, update, delete, and list their prediction entries.
     * @deny (create) - Unauthenticated user cannot create prediction entries.
     * @deny (get, list, update, delete) - Authenticated user trying to access another user's predictions.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/predictions/{predictionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Protects the /users/{userId}/switchStates/{switchStateId} collection, ensuring only the owner can manage their switch states.
     * @path /users/{userId}/switchStates/{switchStateId}
     * @allow (create) - Authenticated user with matching userId can create switch state entries.
     * @allow (get, list, update, delete) - Authenticated user with matching userId can read, update, delete, and list their switch state entries.
     * @deny (create) - Unauthenticated user cannot create switch state entries.
     * @deny (get, list, update, delete) - Authenticated user trying to access another user's switch states.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/switchStates/{switchStateId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}